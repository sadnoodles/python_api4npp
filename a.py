bigdict={
'bytearray':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'all':[[], (), 'all(iterable) -> bool\n\nReturn True if bool(x) is True for all values x in the iterable.'],
'symmetric_difference':[[], (), 'Return the symmetric difference of two sets as a new set.\n\n(i.e. all elements that are in exactly one of the sets.)'],
'global':[[], (), ''],
'__rmod__':[[], (), 'x.__rmod__(y) <==> y%x'],
'__rshift__':[[], (), 'x.__rshift__(y) <==> x>>y'],
'__cmp__':[[], (), 'x.__cmp__(y) <==> cmp(x,y)'],
'finally':[[], (), ''],
'rstrip':[[], (), 'S.rstrip([chars]) -> string or unicode\n\nReturn a copy of the string S with trailing whitespace removed.\nIf chars is given and not None, remove characters in chars instead.\nIf chars is unicode, S will be converted to unicode before stripping'],
'__str__':[[], (), 'x.__str__() <==> str(x)'],
'__exit__':[[], (), '__exit__(*excinfo) -> None.  Closes the file.'],
'__instancecheck__':[[], (), '__instancecheck__() -> bool\ncheck if an object is an instance'],
'fromkeys':[[], (), 'dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v.\nv defaults to None.'],
'difference':[[], (), 'Return the difference of two or more sets as a new set.\n\n(i.e. all elements that are in this set but not the others.)'],
'IndexError':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'RuntimeWarning':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'list':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'iter':[[], (), 'iter(collection) -> iterator\niter(callable, sentinel) -> iterator\n\nGet an iterator from an object.  In the first form, the argument must\nsupply its own iterator, or be a sequence.\nIn the second form, the callable is called until it returns the sentinel.'],
'try':[[], (), ''],
'indices':[[], (), 'S.indices(len) -> (start, stop, stride)\n\nAssuming a sequence of length len, calculate the start and stop\nindices, and the stride length of the extended slice described by\nS. Out of bounds indices are clipped in a manner consistent with the\nhandling of normal slices.'],
'round':[[], (), 'round(number[, ndigits]) -> floating point number\n\nRound a number to a given precision in decimal digits (default 0 digits).\nThis always returns a floating point number.  Precision may be negative.'],
'dir':[[], (), "dir([object]) -> list of strings\n\nIf called without an argument, return the names in the current scope.\nElse, return an alphabetized list of names comprising (some of) the attributes\nof the given object, and of attributes reachable from it.\nIf the object supplies a method named __dir__, it will be used; otherwise\nthe default dir() logic is used and returns:\n  for a module object: the module's attributes.\n  for a class object:  its attributes, and recursively the attributes\n    of its bases.\n  for any other object: its attributes, its class's attributes, and\n    recursively the attributes of its class's base classes."],
'cmp':[[], (), 'cmp(x, y) -> integer\n\nReturn negative if x<y, zero if x==y, positive if x>y.'],
'upper':[[], (), 'S.upper() -> unicode\n\nReturn a copy of S converted to uppercase.'],
'lstrip':[[], (), 'S.lstrip([chars]) -> string or unicode\n\nReturn a copy of the string S with leading whitespace removed.\nIf chars is given and not None, remove characters in chars instead.\nIf chars is unicode, S will be converted to unicode before stripping'],
'__truediv__':[[], (), 'x.__truediv__(y) <==> x/y'],
'issubclass':[[], (), 'issubclass(C, B) -> bool\n\nReturn whether class C is a subclass (i.e., a derived class) of class B.\nWhen using a tuple as the second argument issubclass(X, (A, B, ...)),\nis a shortcut for issubclass(X, A) or issubclass(X, B) or ... (etc.).'],
'pass':[[], (), ''],
'append':[[], (), 'B.append(int) -> None\n\nAppend a single item to the end of B.'],
'index':[[], (), 'S.index(sub [,start [,end]]) -> int\n\nLike S.find() but raise ValueError when the substring is not found.'],
'sum':[[], (), "sum(sequence[, start]) -> value\n\nReturns the sum of a sequence of numbers (NOT strings) plus the value\nof parameter 'start' (which defaults to 0).  When the sequence is\nempty, returns start."],
'abs':[[], (), 'abs(number) -> number\n\nReturn the absolute value of the argument.'],
'values':[[], (), "D.values() -> list of D's values"],
'True':[[], (), ''],
'istitle':[[], (), 'S.istitle() -> bool\n\nReturn True if S is a titlecased string and there is at least one\ncharacter in S, i.e. uppercase characters may only follow uncased\ncharacters and lowercase characters only cased ones. Return False\notherwise.'],
'hash':[[], (), 'hash(object) -> integer\n\nReturn a hash value for the object.  Two objects with the same value have\nthe same hash value.  The reverse is not necessarily true, but likely.'],
'join':[[], (), 'S.join(iterable) -> unicode\n\nReturn a string which is the concatenation of the strings in the\niterable.  The separator between elements is S.'],
'__floordiv__':[[], (), 'x.__floordiv__(y) <==> x//y'],
'len':[[], (), 'len(object) -> integer\n\nReturn the number of items of a sequence or mapping.'],
'__hex__':[[], (), 'x.__hex__() <==> hex(x)'],
'items':[[], (), "D.items() -> list of D's (key, value) pairs, as 2-tuples"],
'__xor__':[[], (), 'x.__xor__(y) <==> x^y'],
'staticmethod':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'SystemError':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'BaseException':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'__getslice__':[[], (), 'x.__getslice__(i, j) <==> x[i:j]\n\nUse of negative indices is not supported.'],
'replace':[[], (), 'B.replace(old, new[, count]) -> bytes\n\nReturn a copy of B with all occurrences of subsection\nold replaced by new.  If the optional argument count is\ngiven, only the first count occurrences are replaced.'],
'__setformat__':[[], (), "float.__setformat__(typestr, fmt) -> None\n\nYou probably don't want to use this function.  It exists mainly to be\nused in Python's test suite.\n\ntypestr must be 'double' or 'float'.  fmt must be one of 'unknown',\n'IEEE, big-endian' or 'IEEE, little-endian', and in addition can only be\none of the latter two if it appears to match the underlying C reality.\n\nOverrides the automatic determination of C-level floating point type.\nThis affects how floats are converted to and from binary strings."],
'divmod':[[], (), 'divmod(x, y) -> (div, mod)\n\nReturn the tuple ((x-x%y)/y, x%y).  Invariant: div*y + mod == x.'],
'apply':[[], (), 'apply(object[, args[, kwargs]]) -> value\n\nCall a callable object with positional arguments taken from the tuple args,\nand keyword arguments taken from the optional dictionary kwargs.\nNote that classes are callable, as are instances with a __call__() method.\n\nDeprecated since release 2.3. Instead, use the extended call syntax:\n    function(*args, **keywords).'],
'from':[[], (), ''],
'zip':[[], (), 'zip(seq1 [, seq2 [...]]) -> [(seq1[0], seq2[0] ...), (...)]\n\nReturn a list of tuples, where each tuple contains the i-th element\nfrom each of the argument sequences.  The returned list is truncated\nin length to the length of the shortest argument sequence.'],
'rindex':[[], (), 'S.rindex(sub [,start [,end]]) -> int\n\nLike S.rfind() but raise ValueError when the substring is not found.'],
'next':[[], (), 'x.next() -> the next value, or raise StopIteration'],
'chr':[[], (), 'chr(i) -> character\n\nReturn a string of one character with ordinal i; 0 <= i < 256.'],
'xrange':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'encode':[[], (), "S.encode([encoding[,errors]]) -> string or unicode\n\nEncodes S using the codec registered for encoding. encoding defaults\nto the default encoding. errors may be given to set a different error\nhandling scheme. Default is 'strict' meaning that encoding errors raise\na UnicodeEncodeError. Other possible values are 'ignore', 'replace' and\n'xmlcharrefreplace' as well as any other name registered with\ncodecs.register_error that can handle UnicodeEncodeErrors."],
'__rfloordiv__':[[], (), 'x.__rfloordiv__(y) <==> y//x'],
'type':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'tell':[[], (), 'tell() -> current file position, an integer (may be a long integer).'],
'sort':[[], (), 'L.sort(cmp=None, key=None, reverse=False) -- stable sort *IN PLACE*;\ncmp(x, y) -> -1, 0, 1'],
'isatty':[[], (), 'isatty() -> true or false.  True if the file is connected to a tty device.'],
'__coerce__':[[], (), 'x.__coerce__(y) <==> coerce(x, y)'],
'__iter__':[[], (), 'x.__iter__() <==> iter(x)'],
'__nonzero__':[[], (), 'x.__nonzero__() <==> x != 0'],
'delattr':[[], (), "delattr(object, name)\n\nDelete a named attribute on an object; delattr(x, 'y') is equivalent to\n``del x.y''."],
'writelines':[[], (), 'writelines(sequence_of_strings) -> None.  Write the strings to the file.\n\nNote that newlines are not added.  The sequence can be any iterable object\nproducing strings. This is equivalent to calling write() for each string.'],
'raw_input':[[], (), 'raw_input([prompt]) -> string\n\nRead a string from standard input.  The trailing newline is stripped.\nIf the user hits EOF (Unix: Ctl-D, Windows: Ctl-Z+Return), raise EOFError.\nOn Unix, GNU readline is used if enabled.  The prompt string, if given,\nis printed without a trailing newline before reading.'],
'endswith':[[], (), 'B.endswith(suffix [,start [,end]]) -> bool\n\nReturn True if B ends with the specified suffix, False otherwise.\nWith optional start, test B beginning at that position.\nWith optional end, stop comparing B at that position.\nsuffix can also be a tuple of strings to try.'],
'expandtabs':[[], (), 'B.expandtabs([tabsize]) -> copy of B\n\nReturn a copy of B where all tab characters are expanded using spaces.\nIf tabsize is not given, a tab size of 8 characters is assumed.'],
'isspace':[[], (), 'S.isspace() -> bool\n\nReturn True if all characters in S are whitespace\nand there is at least one character in S, False otherwise.'],
'del':[[], (), ''],
'__oct__':[[], (), 'x.__oct__() <==> oct(x)'],
'def':[[], (), ''],
'GeneratorExit':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'startswith':[[], (), 'S.startswith(prefix[, start[, end]]) -> bool\n\nReturn True if S starts with the specified prefix, False otherwise.\nWith optional start, test S beginning at that position.\nWith optional end, stop comparing S at that position.\nprefix can also be a tuple of strings to try.'],
'in':[[], (), ''],
'KeyError':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'coerce':[[], (), 'coerce(x, y) -> (x1, y1)\n\nReturn a tuple consisting of the two numeric arguments converted to\na common type, using the same rules as used by arithmetic operations.\nIf coercion is not possible, raise TypeError.'],
'PendingDeprecationWarning':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'unichr':[[], (), 'unichr(i) -> Unicode character\n\nReturn a Unicode string of one character with ordinal i; 0 <= i <= 0x10ffff.'],
'__sizeof__':[[], (), '__sizeof__() -> int\nsize of object in memory, in bytes'],
'__delslice__':[[], (), 'x.__delslice__(i, j) <==> del x[i:j]\n\nUse of negative indices is not supported.'],
'write':[[], (), 'write(str) -> None.  Write string str to file.\n\nNote that due to buffering, flush() or close() may be needed before\nthe file on disk reflects the data written.'],
'__pos__':[[], (), 'x.__pos__() <==> +x'],
'ValueError':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'tolist':[[], (), ''],
'max':[[], (), 'max(iterable[, key=func]) -> value\nmax(a, b, c, ...[, key=func]) -> value\n\nWith a single iterable argument, return its largest item.\nWith two or more arguments, return the largest argument.'],
'OSError':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'capitalize':[[], (), 'S.capitalize() -> string\n\nReturn a copy of the string S with only its first character\ncapitalized.'],
'isdisjoint':[[], (), 'Return True if two sets have a null intersection.'],
'classmethod':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'UnboundLocalError':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'NotImplementedError':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'lambda':[[], (), ''],
'elif':[[], (), ''],
'vars':[[], (), 'vars([object]) -> dictionary\n\nWithout arguments, equivalent to locals().\nWith an argument, equivalent to object.__dict__.'],
'popitem':[[], (), 'D.popitem() -> (k, v), remove and return some (key, value) pair as a\n2-tuple; but raise KeyError if D is empty.'],
'__rdiv__':[[], (), 'x.__rdiv__(y) <==> y/x'],
'NameError':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'return':[[], (), ''],
'StandardError':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'__setstate__':[[], (), ''],
'TabError':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'__subclasscheck__':[[], (), '__subclasscheck__() -> bool\ncheck if a class is a subclass'],
'break':[[], (), ''],
'__pow__':[[], (), 'x.__pow__(y[, z]) <==> pow(x, y[, z])'],
'not':[[], (), ''],
'sorted':[[], (), 'sorted(iterable, cmp=None, key=None, reverse=False) --> new sorted list'],
'rsplit':[[], (), 'S.rsplit([sep [,maxsplit]]) -> list of strings\n\nReturn a list of the words in the string S, using sep as the\ndelimiter string, starting at the end of the string and working\nto the front.  If maxsplit is given, at most maxsplit splits are\ndone. If sep is not specified or is None, any whitespace string\nis a separator.'],
'__rxor__':[[], (), 'x.__rxor__(y) <==> y^x'],
'iterkeys':[[], (), 'D.iterkeys() -> an iterator over the keys of D'],
'__delitem__':[[], (), 'x.__delitem__(y) <==> del x[y]'],
'map':[[], (), 'map(function, sequence[, sequence, ...]) -> list\n\nReturn a list of the results of applying the function to the items of\nthe argument sequence(s).  If more than one sequence is given, the\nfunction is called with an argument list consisting of the corresponding\nitem of each sequence, substituting None for missing values when not all\nsequences have the same length.  If the function is None, return a list of\nthe items of the sequence (or a list of tuples if more than one sequence).'],
'UnicodeTranslateError':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'viewkeys':[[], (), "D.viewkeys() -> a set-like object providing a view on D's keys"],
'yield':[[], (), ''],
'BytesWarning':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'print':[[], (), ''],
'None':[[], (), ''],
'__setitem__':[[], (), 'x.__setitem__(i, y) <==> x[i]=y'],
'tobytes':[[], (), ''],
'ord':[[], (), 'ord(c) -> integer\n\nReturn the integer ordinal of a one-character string.'],
'setdefault':[[], (), 'D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D'],
'filter':[[], (), 'filter(function or None, sequence) -> list, tuple, or string\n\nReturn those items of sequence for which function(item) is true.  If\nfunction is None, return the items that are true.  If sequence is a tuple\nor string, return the same type, else return a list.'],
'islower':[[], (), 'S.islower() -> bool\n\nReturn True if all cased characters in S are lowercase and there is\nat least one cased character in S, False otherwise.'],
'isupper':[[], (), 'S.isupper() -> bool\n\nReturn True if all cased characters in S are uppercase and there is\nat least one cased character in S, False otherwise.'],
'__delete__':[[], (), 'descr.__delete__(obj)'],
'issubset':[[], (), 'Report whether another set contains this set.'],
'RuntimeError':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'enumerate':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'ljust':[[], (), 'S.ljust(width[, fillchar]) -> string\n\nReturn S left-justified in a string of length width. Padding is\ndone using the specified fill character (default is a space).'],
'open':[[], (), 'open(name[, mode[, buffering]]) -> file object\n\nOpen a file using the file() type, returns a file object.  This is the\npreferred way to open a file.  See file.__doc__ for further information.'],
'__alloc__':[[], (), 'B.__alloc__() -> int\n\nReturns the number of bytes actually allocated.'],
'__float__':[[], (), 'x.__float__() <==> float(x)'],
'basestring':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'__subclasses__':[[], (), '__subclasses__() -> list of immediate subclasses'],
'isalnum':[[], (), 'S.isalnum() -> bool\n\nReturn True if all characters in S are alphanumeric\nand there is at least one character in S, False otherwise.'],
'isalpha':[[], (), 'S.isalpha() -> bool\n\nReturn True if all characters in S are alphabetic\nand there is at least one character in S, False otherwise.'],
'bit_length':[[], (), "long.bit_length() -> int or long\n\nNumber of bits necessary to represent self in binary.\n>>> bin(37L)\n'0b100101'\n>>> (37L).bit_length()\n6"],
'__ixor__':[[], (), 'x.__ixor__(y) <==> x^y'],
'__rdivmod__':[[], (), 'x.__rdivmod__(y) <==> divmod(y, x)'],
'tuple':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'reversed':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'getter':[[], (), 'Descriptor to change the getter on a property.'],
'copy':[[], (), 'D.copy() -> a shallow copy of D'],
'setattr':[[], (), "setattr(object, name, value)\n\nSet a named attribute on an object; setattr(x, 'y', v) is equivalent to\n``x.y = v''."],
'ArithmeticError':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'str':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'and':[[], (), ''],
'__rtruediv__':[[], (), 'x.__rtruediv__(y) <==> y/x'],
'__getattribute__':[[], (), "x.__getattribute__('name') <==> x.name"],
'Exception':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'__radd__':[[], (), 'x.__radd__(y) <==> y+x'],
'conjugate':[[], (), 'Returns self, the complex conjugate of any int.'],
'seek':[[], (), 'seek(offset[, whence]) -> None.  Move to new file position.\n\nArgument offset is a byte count.  Optional argument whence defaults to\n0 (offset from start of file, offset should be >= 0); other values are 1\n(move relative to current position, positive or negative), and 2 (move\nrelative to end of file, usually negative, although many platforms allow\nseeking beyond the end of a file).  If the file is opened in text mode,\nonly offsets returned by tell() are legal.  Use of other offsets causes\nundefined behavior.\nNote that not all file objects are seekable.'],
'any':[[], (), 'any(iterable) -> bool\n\nReturn True if bool(x) is True for any x in the iterable.'],
'DeprecationWarning':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'__new__':[[], (), 'T.__new__(S, ...) -> a new object with type S, a subtype of T'],
'min':[[], (), 'min(iterable[, key=func]) -> value\nmin(a, b, c, ...[, key=func]) -> value\n\nWith a single iterable argument, return its smallest item.\nWith two or more arguments, return the smallest argument.'],
'exec':[[], (), ''],
'fromhex':[[], (), "float.fromhex(string) -> float\n\nCreate a floating-point number from a hexadecimal string.\n>>> float.fromhex('0x1.ffffp10')\n2047.984375\n>>> float.fromhex('-0x1p-1074')\n-4.9406564584124654e-324"],
'object':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'callable':[[], (), 'callable(object) -> bool\n\nReturn whether the object is callable (i.e., some kind of function).\nNote that classes are callable, as are instances with a __call__() method.'],
'ZeroDivisionError':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'__rlshift__':[[], (), 'x.__rlshift__(y) <==> y<<x'],
'IndentationError':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'AssertionError':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'viewvalues':[[], (), "D.viewvalues() -> an object providing a view on D's values"],
'clear':[[], (), 'Remove all elements from this set.'],
'partition':[[], (), 'S.partition(sep) -> (head, sep, tail)\n\nSearch for the separator sep in S, and return the part before it,\nthe separator itself, and the part after it.  If the separator is not\nfound, return S and two empty strings.'],
'mro':[[], (), "mro() -> list\nreturn a type's method resolution order"],
'AttributeError':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'difference_update':[[], (), 'Remove all elements of another set from this set.'],
'SyntaxError':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'has_key':[[], (), 'D.has_key(k) -> True if D has a key k, else False'],
'__rmul__':[[], (), 'x.__rmul__(n) <==> n*x'],
'find':[[], (), 'S.find(sub [,start [,end]]) -> int\n\nReturn the lowest index in S where substring sub is found,\nsuch that sub is contained within s[start:end].  Optional\narguments start and end are interpreted as in slice notation.\n\nReturn -1 on failure.'],
'setter':[[], (), 'Descriptor to change the setter on a property.'],
'title':[[], (), 'S.title() -> unicode\n\nReturn a titlecased version of S, i.e. words start with title case\ncharacters, all remaining cased characters have lower case.'],
'__enter__':[[], (), '__enter__() -> self.'],
'dict':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'__call__':[[], (), 'x.__call__(...) <==> x(...)'],
'oct':[[], (), 'oct(number) -> string\n\nReturn the octal representation of an integer or long integer.'],
'SystemExit':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'get':[[], (), 'D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.'],
'repr':[[], (), 'repr(object) -> string\n\nReturn the canonical string representation of the object.\nFor most object types, eval(repr(object)) == object.'],
'__subclasshook__':[[], (), 'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).'],
'iteritems':[[], (), 'D.iteritems() -> an iterator over the (key, value) items of D'],
'fileno':[[], (), 'fileno() -> integer "file descriptor".\n\nThis is needed for lower-level file interfaces, such os.read().'],
'bytes':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'remove':[[], (), 'Remove an element from a set; it must be a member.\n\nIf the element is not a member, raise a KeyError.'],
'reload':[[], (), 'reload(module) -> module\n\nReload the module.  The module must have been successfully imported before.'],
'set':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'close':[[], (), 'close() -> None or (perhaps) an integer.  Close the file.\n\nSets data attribute .closed to True.  A closed file cannot be used for\nfurther I/O operations.  close() may be called more than once without\nerror.  Some kinds of file objects (for example, opened by popen())\nmay return an exit status upon closing.'],
'isdecimal':[[], (), 'S.isdecimal() -> bool\n\nReturn True if there are only decimal characters in S,\nFalse otherwise.'],
'locals':[[], (), "locals() -> dictionary\n\nUpdate and return a dictionary containing the current scope's local variables."],
'viewitems':[[], (), "D.viewitems() -> a set-like object providing a view on D's items"],
'__rand__':[[], (), 'x.__rand__(y) <==> y&x'],
'FloatingPointError':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'as_integer_ratio':[[], (), 'float.as_integer_ratio() -> (int, int)\n\nReturns a pair of integers, whose ratio is exactly equal to the original\nfloat and with a positive denominator.\nRaises OverflowError on infinities and a ValueError on NaNs.\n\n>>> (10.0).as_integer_ratio()\n(10, 1)\n>>> (0.0).as_integer_ratio()\n(0, 1)\n>>> (-.25).as_integer_ratio()\n(-1, 4)'],
'getattr':[[], (), "getattr(object, name[, default]) -> value\n\nGet a named attribute from an object; getattr(x, 'y') is equivalent to x.y.\nWhen a default argument is given, it is returned when the attribute doesn't\nexist; without it, an exception is raised in that case."],
'import':[[], (), ''],
'FutureWarning':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'extend':[[], (), 'B.extend(iterable int) -> None\n\nAppend all the elements from the iterator or sequence to the\nend of B.'],
'__divmod__':[[], (), 'x.__divmod__(y) <==> divmod(x, y)'],
'frozenset':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'__unicode__':[[], (), ''],
'TypeError':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'reverse':[[], (), 'L.reverse() -- reverse *IN PLACE*'],
'__trunc__':[[], (), 'Truncating an Integral returns itself.'],
'UserWarning':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'rfind':[[], (), 'B.rfind(sub [,start [,end]]) -> int\n\nReturn the highest index in B where subsection sub is found,\nsuch that sub is contained within s[start,end].  Optional\narguments start and end are interpreted as in slice notation.\n\nReturn -1 on failure.'],
'__delattr__':[[], (), "x.__delattr__('name') <==> del x.name"],
'pow':[[], (), 'pow(x, y[, z]) -> number\n\nWith two arguments, equivalent to x**y.  With three arguments,\nequivalent to (x**y) % z, but may be more efficient (e.g. for longs).'],
'rpartition':[[], (), 'B.rpartition(sep) -> (head, sep, tail)\n\nSearches for the separator sep in B, starting at the end of B,\nand returns the part before it, the separator itself, and the\npart after it.  If the separator is not found, returns two empty\nbytearray objects and B.'],
'StopIteration':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'globals':[[], (), "globals() -> dictionary\n\nReturn the dictionary containing the current scope's global variables."],
'__rsub__':[[], (), 'x.__rsub__(y) <==> y-x'],
'rjust':[[], (), 'B.rjust(width[, fillchar]) -> copy of B\n\nReturn B right justified in a string of length width. Padding is\ndone using the specified fill character (default is a space)'],
'raise':[[], (), ''],
'union':[[], (), 'Return the union of sets as a new set.\n\n(i.e. all elements that are in either set.)'],
'__set__':[[], (), 'descr.__set__(obj, value)'],
'__abs__':[[], (), 'x.__abs__() <==> abs(x)'],
'int':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'itervalues':[[], (), 'D.itervalues() -> an iterator over the values of D'],
'__len__':[[], (), 'x.__len__() <==> len(x)'],
'else':[[], (), ''],
'assert':[[], (), ''],
'zfill':[[], (), 'B.zfill(width) -> copy of B\n\nPad a numeric string B with zeros on the left, to fill a field\nof the specified width.  B is never truncated.'],
'UnicodeEncodeError':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'__lshift__':[[], (), 'x.__lshift__(y) <==> x<<y'],
'IOError':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'__eq__':[[], (), 'x.__eq__(y) <==> x==y'],
'hasattr':[[], (), 'hasattr(object, name) -> bool\n\nReturn whether the object has an attribute with the given name.\n(This is done by calling getattr(object, name) and catching exceptions.)'],
'__mod__':[[], (), 'x.__mod__(y) <==> x%y'],
'__iadd__':[[], (), 'x.__iadd__(y) <==> x+=y'],
'compile':[[], (), "compile(source, filename, mode[, flags[, dont_inherit]]) -> code object\n\nCompile the source string (a Python module, statement or expression)\ninto a code object that can be executed by the exec statement or eval().\nThe filename will be used for run-time error messages.\nThe mode must be 'exec' to compile a module, 'single' to compile a\nsingle (interactive) statement, or 'eval' to compile an expression.\nThe flags argument, if present, controls which future statements influence\nthe compilation of the code.\nThe dont_inherit argument, if non-zero, stops the compilation inheriting\nthe effects of any future statements in effect in the code calling\ncompile; if absent or zero these statements do influence the compilation,\nin addition to any features explicitly specified."],
'while':[[], (), ''],
'KeyboardInterrupt':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'__hash__':[[], (), 'x.__hash__() <==> hash(x)'],
'__sub__':[[], (), 'x.__sub__(y) <==> x-y'],
'property':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'__ge__':[[], (), 'x.__ge__(y) <==> x>=y'],
'MemoryError':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'__import__':[[], (), "__import__(name, globals={}, locals={}, fromlist=[], level=-1) -> module\n\nImport a module.  The globals are only used to determine the context;\nthey are not modified.  The locals are currently unused.  The fromlist\nshould be a list of names to emulate ``from name import ...'', or an\nempty list to emulate ``import name''.\nWhen importing a module from a package, note that __import__('A.B', ...)\nreturns package A when fromlist is empty, but its submodule B when\nfromlist is not empty.  Level is used to determine whether to perform \nabsolute or relative imports.  -1 is the original strategy of attempting\nboth absolute and relative imports, 0 is absolute, a positive number\nis the number of parent directories to search relative to the current module."],
'is':[[], (), ''],
'__reduce__':[[], (), ''],
'SyntaxWarning':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'xreadlines':[[], (), 'xreadlines() -> returns self.\n\nFor backward compatibility. File objects now include the performance\noptimizations previously implemented in the xreadlines module.'],
'__getformat__':[[], (), "float.__getformat__(typestr) -> string\n\nYou probably don't want to use this function.  It exists mainly to be\nused in Python's test suite.\n\ntypestr must be 'double' or 'float'.  This function returns whichever of\n'unknown', 'IEEE, big-endian' or 'IEEE, little-endian' best describes the\nformat of floating point numbers used by the C type named by typestr."],
'id':[[], (), "id(object) -> integer\n\nReturn the identity of an object.  This is guaranteed to be unique among\nsimultaneously existing objects.  (Hint: it's the object's memory address.)"],
'__init__':[[], (), 'x.__init__(...) initializes x; see help(type(x)) for signature'],
'if':[[], (), ''],
'__getitem__':[[], (), 'x.__getitem__(y) <==> x[y]'],
'__ior__':[[], (), 'x.__ior__(y) <==> x|y'],
'UnicodeWarning':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'complex':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'split':[[], (), 'B.split([sep[, maxsplit]]) -> list of bytearray\n\nReturn a list of the sections in B, using sep as the delimiter.\nIf sep is not given, B is split on ASCII whitespace characters\n(space, tab, return, newline, formfeed, vertical tab).\nIf maxsplit is given, at most maxsplit splits are done.'],
'isnumeric':[[], (), 'S.isnumeric() -> bool\n\nReturn True if there are only numeric characters in S,\nFalse otherwise.'],
'__repr__':[[], (), 'x.__repr__() <==> repr(x)'],
'keys':[[], (), "D.keys() -> list of D's keys"],
'__or__':[[], (), 'x.__or__(y) <==> x|y'],
'__add__':[[], (), 'x.__add__(y) <==> x+y'],
'lower':[[], (), 'S.lower() -> string\n\nReturn a copy of the string S converted to lowercase.'],
'center':[[], (), 'B.center(width[, fillchar]) -> copy of B\n\nReturn B centered in a string of length width.  Padding is\ndone using the specified fill character (default is a space).'],
'__div__':[[], (), 'x.__div__(y) <==> x/y'],
'__neg__':[[], (), 'x.__neg__() <==> -x'],
'OverflowError':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'WindowsError':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'__int__':[[], (), 'x.__int__() <==> int(x)'],
'__ror__':[[], (), 'x.__ror__(y) <==> y|x'],
'issuperset':[[], (), 'Report whether this set contains another set.'],
'unicode':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'UnicodeDecodeError':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'memoryview':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'__lt__':[[], (), 'x.__lt__(y) <==> x<y'],
'isinstance':[[], (), "isinstance(object, class-or-type-or-tuple) -> bool\n\nReturn whether an object is an instance of a class or of a subclass thereof.\nWith a type as second argument, return whether that is the object's type.\nThe form using a tuple, isinstance(x, (A, B, ...)), is a shortcut for\nisinstance(x, A) or isinstance(x, B) or ... (etc.)."],
'except':[[], (), ''],
'add':[[], (), 'Add an element to a set.\n\nThis has no effect if the element is already present.'],
'input':[[], (), 'input([prompt]) -> value\n\nEquivalent to eval(raw_input(prompt)).'],
'bin':[[], (), 'bin(number) -> string\n\nReturn the binary representation of an integer or long integer.'],
'format':[[], (), "S.format(*args, **kwargs) -> string\n\nReturn a formatted version of S, using substitutions from args and kwargs.\nThe substitutions are identified by braces ('{' and '}')."],
'read':[[], (), 'read([size]) -> read at most size bytes, returned as a string.\n\nIf the size argument is negative or omitted, read until EOF is reached.\nNotice that when in non-blocking mode, less data than what was requested\nmay be returned, even if no size parameter was given.'],
'pop':[[], (), 'L.pop([index]) -> item -- remove and return item at index (default last).\nRaises IndexError if list is empty or index is out of range.'],
'__gt__':[[], (), 'x.__gt__(y) <==> x>y'],
'intersection':[[], (), 'Return the intersection of two or more sets as a new set.\n\n(i.e. elements that are common to all of the sets.)'],
'insert':[[], (), 'B.insert(index, int) -> None\n\nInsert a single item into the bytearray before the given index.'],
'__reversed__':[[], (), 'Returns a reverse iterator.'],
'Warning':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'__long__':[[], (), 'x.__long__() <==> long(x)'],
'False':[[], (), ''],
'intern':[[], (), "intern(string) -> string\n\n``Intern'' the given string.  This enters the string in the (global)\ntable of interned strings whose purpose is to speed up dictionary lookups.\nReturn the string itself or the previously interned string object with the\nsame value."],
'flush':[[], (), 'flush() -> None.  Flush the internal I/O buffer.'],
'__getnewargs__':[[], (), ''],
'BufferError':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'__setattr__':[[], (), "x.__setattr__('name', value) <==> x.name = value"],
'slice':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'__iand__':[[], (), 'x.__iand__(y) <==> x&y'],
'for':[[], (), ''],
'__contains__':[[], (), 'D.__contains__(k) -> True if D has a key k, else False'],
'buffer':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'continue':[[], (), ''],
'ImportWarning':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'__ne__':[[], (), 'x.__ne__(y) <==> x!=y'],
'EOFError':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'symmetric_difference_update':[[], (), 'Update a set with the symmetric difference of itself and another.'],
'ReferenceError':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'swapcase':[[], (), 'S.swapcase() -> string\n\nReturn a copy of the string S with uppercase characters\nconverted to lowercase and vice versa.'],
'super':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'deleter':[[], (), 'Descriptor to change the deleter on a property.'],
'__imul__':[[], (), 'x.__imul__(y) <==> x*=y'],
'__setslice__':[[], (), 'x.__setslice__(i, j, y) <==> x[i:j]=y\n\nUse  of negative indices is not supported.'],
'__length_hint__':[[], (), 'Private method returning an estimate of len(list(it)).'],
'range':[[], (), 'range([start,] stop[, step]) -> list of integers\n\nReturn a list containing an arithmetic progression of integers.\nrange(i, j) returns [i, i+1, i+2, ..., j-1]; start (!) defaults to 0.\nWhen step is given, it specifies the increment (or decrement).\nFor example, range(4) returns [0, 1, 2, 3].  The end point is omitted!\nThese are exactly the valid indices for a list of 4 elements.'],
'__mul__':[[], (), 'x.__mul__(y) <==> x*y'],
'discard':[[], (), 'Remove an element from a set if it is a member.\n\nIf the element is not a member, do nothing.'],
'or':[[], (), ''],
'float':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'splitlines':[[], (), 'S.splitlines([keepends]) -> list of strings\n\nReturn a list of the lines in S, breaking at line boundaries.\nLine breaks are not included in the resulting list unless keepends\nis given and true.'],
'strip':[[], (), 'S.strip([chars]) -> string or unicode\n\nReturn a copy of the string S with leading and trailing\nwhitespace removed.\nIf chars is given and not None, remove characters in chars instead.\nIf chars is unicode, S will be converted to unicode before stripping'],
'__and__':[[], (), 'x.__and__(y) <==> x&y'],
'LookupError':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'is_integer':[[], (), 'Returns True if the float is an integer.'],
'__rpow__':[[], (), 'y.__rpow__(x[, z]) <==> pow(x, y[, z])'],
'UnicodeError':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'hex':[[], (), "float.hex() -> string\n\nReturn a hexadecimal representation of a floating-point number.\n>>> (-0.1).hex()\n'-0x1.999999999999ap-4'\n>>> 3.14159.hex()\n'0x1.921f9f01b866ep+1'"],
'long':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'class':[[], (), ''],
'decode':[[], (), "S.decode([encoding[,errors]]) -> object\n\nDecodes S using the codec registered for encoding. encoding defaults\nto the default encoding. errors may be given to set a different error\nhandling scheme. Default is 'strict' meaning that encoding errors raise\na UnicodeDecodeError. Other possible values are 'ignore' and 'replace'\nas well as any other name registered with codecs.register_error that is\nable to handle UnicodeDecodeErrors."],
'translate':[[], (), 'B.translate(table[, deletechars]) -> bytearray\n\nReturn a copy of B, where all characters occurring in the\noptional argument deletechars are removed, and the remaining\ncharacters have been mapped through the given translation\ntable, which must be a bytes object of length 256.'],
'__isub__':[[], (), 'x.__isub__(y) <==> x-y'],
'__invert__':[[], (), 'x.__invert__() <==> ~x'],
'reduce':[[], (), 'reduce(function, sequence[, initial]) -> value\n\nApply a function of two arguments cumulatively to the items of a sequence,\nfrom left to right, so as to reduce the sequence to a single value.\nFor example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates\n((((1+2)+3)+4)+5).  If initial is present, it is placed before the items\nof the sequence in the calculation, and serves as a default when the\nsequence is empty.'],
'with':[[], (), ''],
'__get__':[[], (), 'descr.__get__(obj[, type]) -> value'],
'count':[[], (), 'L.count(value) -> integer -- return number of occurrences of value'],
'__le__':[[], (), 'x.__le__(y) <==> x<=y'],
'ImportError':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'readlines':[[], (), 'readlines([size]) -> list of strings, each a line from the file.\n\nCall readline() repeatedly and return a list of the lines so read.\nThe optional size argument, if given, is an approximate bound on the\ntotal number of bytes in the lines returned.'],
'as':[[], (), ''],
'__rrshift__':[[], (), 'x.__rrshift__(y) <==> y>>x'],
'file':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'EnvironmentError':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'isdigit':[[], (), 'S.isdigit() -> bool\n\nReturn True if all characters in S are digits\nand there is at least one character in S, False otherwise.'],
'__reduce_ex__':[[], (), 'helper for pickle'],
'readinto':[[], (), "readinto() -> Undocumented.  Don't use this; it may go away."],
'__format__':[[], (), 'default object formatter'],
'execfile':[[], (), 'execfile(filename[, globals[, locals]])\n\nRead and execute a Python script from a file.\nThe globals and locals are dictionaries, defaulting to the current\nglobals and locals.  If only globals is given, locals defaults to it.'],
'bool':[[], (), "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"],
'truncate':[[], (), 'truncate([size]) -> None.  Truncate the file to at most size bytes.\n\nSize defaults to the current file position, as returned by tell().'],
'update':[[], (), 'D.update(E, **F) -> None.  Update D from dict/iterable E and F.\nIf E has a .keys() method, does:     for k in E: D[k] = E[k]\nIf E lacks .keys() method, does:     for (k, v) in E: D[k] = v\nIn either case, this is followed by: for k in F: D[k] = F[k]'],
'eval':[[], (), 'eval(source[, globals[, locals]]) -> value\n\nEvaluate the source in the context of globals and locals.\nThe source may be a string representing a Python expression\nor a code object as returned by compile().\nThe globals must be a dictionary and locals can be any mapping,\ndefaulting to the current globals and locals.\nIf only globals is given, locals defaults to it.'],
'readline':[[], (), 'readline([size]) -> next line from the file, as a string.\n\nRetain newline.  A non-negative size argument limits the maximum\nnumber of bytes to return (an incomplete line may be returned then).\nReturn an empty string at EOF.'],
'intersection_update':[[], (), 'Update a set with the intersection of itself and another.'],
'__index__':[[], (), 'x[y:z] <==> x[y.__index__():z.__index__()]'],
}